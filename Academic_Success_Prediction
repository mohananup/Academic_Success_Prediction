{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73290,"databundleVersionId":8710574,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**Goal**\n* Predict academic risk of students in higher education(Graduate, Enrolled, Dropout)\n\n**Type of Problem**\n* MultiClass Classification \n\n**Evaluation Metric**\n* Accuracy Score\n    ","metadata":{}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport math as math\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.feature_selection import mutual_info_classif\n\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, RobustScaler, MinMaxScaler\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import accuracy_score, classification_report\n\nfrom sklearn.pipeline import Pipeline","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-25T13:46:07.487533Z","iopub.execute_input":"2024-06-25T13:46:07.488065Z","iopub.status.idle":"2024-06-25T13:46:07.496990Z","shell.execute_reply.started":"2024-06-25T13:46:07.488027Z","shell.execute_reply":"2024-06-25T13:46:07.495715Z"},"trusted":true},"execution_count":246,"outputs":[]},{"cell_type":"markdown","source":"**Loading of Data**","metadata":{}},{"cell_type":"code","source":"#Import data\ndata_raw = pd.read_csv('/kaggle/input/playground-series-s4e6/train.csv', index_col='id')\ndata_val = pd.read_csv('/kaggle/input/playground-series-s4e6/test.csv', index_col='id')\n\ndata1 = data_raw.copy(deep=True)\ndata1_test= data_val.copy(deep=True)\n\ndata1.name = \"Training Data\"\ndata1_test.name = \"Testing Data\"\n\ndata_cleaner = [data1, data1_test]\n\ndata1.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:46.789644Z","iopub.execute_input":"2024-06-25T12:58:46.790201Z","iopub.status.idle":"2024-06-25T12:58:47.295465Z","shell.execute_reply.started":"2024-06-25T12:58:46.790153Z","shell.execute_reply":"2024-06-25T12:58:47.294187Z"},"trusted":true},"execution_count":190,"outputs":[{"execution_count":190,"output_type":"execute_result","data":{"text/plain":"    Marital status  Application mode  Application order  Course  \\\nid                                                                \n0                1                 1                  1    9238   \n1                1                17                  1    9238   \n2                1                17                  2    9254   \n3                1                 1                  3    9500   \n4                1                 1                  2    9500   \n\n    Daytime/evening attendance  Previous qualification  \\\nid                                                       \n0                            1                       1   \n1                            1                       1   \n2                            1                       1   \n3                            1                       1   \n4                            1                       1   \n\n    Previous qualification (grade)  Nacionality  Mother's qualification  \\\nid                                                                        \n0                            126.0            1                       1   \n1                            125.0            1                      19   \n2                            137.0            1                       3   \n3                            131.0            1                      19   \n4                            132.0            1                      19   \n\n    Father's qualification  ...  Curricular units 2nd sem (credited)  \\\nid                          ...                                        \n0                       19  ...                                    0   \n1                       19  ...                                    0   \n2                       19  ...                                    0   \n3                        3  ...                                    0   \n4                       37  ...                                    0   \n\n    Curricular units 2nd sem (enrolled)  \\\nid                                        \n0                                     6   \n1                                     6   \n2                                     6   \n3                                     8   \n4                                     7   \n\n    Curricular units 2nd sem (evaluations)  \\\nid                                           \n0                                        7   \n1                                        9   \n2                                        0   \n3                                       11   \n4                                       12   \n\n    Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\nid                                                                          \n0                                     6                         12.428571   \n1                                     0                          0.000000   \n2                                     0                          0.000000   \n3                                     7                         12.820000   \n4                                     6                         12.933333   \n\n    Curricular units 2nd sem (without evaluations)  Unemployment rate  \\\nid                                                                      \n0                                                0               11.1   \n1                                                0               11.1   \n2                                                0               16.2   \n3                                                0               11.1   \n4                                                0                7.6   \n\n    Inflation rate   GDP    Target  \nid                                  \n0              0.6  2.02  Graduate  \n1              0.6  2.02   Dropout  \n2              0.3 -0.92   Dropout  \n3              0.6  2.02  Enrolled  \n4              2.6  0.32  Graduate  \n\n[5 rows x 37 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Marital status</th>\n      <th>Application mode</th>\n      <th>Application order</th>\n      <th>Course</th>\n      <th>Daytime/evening attendance</th>\n      <th>Previous qualification</th>\n      <th>Previous qualification (grade)</th>\n      <th>Nacionality</th>\n      <th>Mother's qualification</th>\n      <th>Father's qualification</th>\n      <th>...</th>\n      <th>Curricular units 2nd sem (credited)</th>\n      <th>Curricular units 2nd sem (enrolled)</th>\n      <th>Curricular units 2nd sem (evaluations)</th>\n      <th>Curricular units 2nd sem (approved)</th>\n      <th>Curricular units 2nd sem (grade)</th>\n      <th>Curricular units 2nd sem (without evaluations)</th>\n      <th>Unemployment rate</th>\n      <th>Inflation rate</th>\n      <th>GDP</th>\n      <th>Target</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>126.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>7</td>\n      <td>6</td>\n      <td>12.428571</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Graduate</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>17</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>125.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>17</td>\n      <td>2</td>\n      <td>9254</td>\n      <td>1</td>\n      <td>1</td>\n      <td>137.0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>16.2</td>\n      <td>0.3</td>\n      <td>-0.92</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>131.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>8</td>\n      <td>11</td>\n      <td>7</td>\n      <td>12.820000</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Enrolled</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>132.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>37</td>\n      <td>...</td>\n      <td>0</td>\n      <td>7</td>\n      <td>12</td>\n      <td>6</td>\n      <td>12.933333</td>\n      <td>0</td>\n      <td>7.6</td>\n      <td>2.6</td>\n      <td>0.32</td>\n      <td>Graduate</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 37 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\nclass color:\n   PURPLE = '\\033[95m'\n   CYAN = '\\033[96m'\n   DARKCYAN = '\\033[36m'\n   BLUE = '\\033[94m'\n   GREEN = '\\033[92m'\n   YELLOW = '\\033[93m'\n   RED = '\\033[91m'\n   BOLD = '\\033[1m'\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.300213Z","iopub.execute_input":"2024-06-25T12:58:47.300657Z","iopub.status.idle":"2024-06-25T12:58:47.310233Z","shell.execute_reply.started":"2024-06-25T12:58:47.300597Z","shell.execute_reply":"2024-06-25T12:58:47.308612Z"},"trusted":true},"execution_count":191,"outputs":[]},{"cell_type":"markdown","source":"# Basic Data Analysis","metadata":{}},{"cell_type":"raw","source":"\n#Data Shape \n\nprint(color.BOLD + \"Training data shape:\" + color.END, data_raw.shape )\nprint(color.BOLD + \"Testing data shape:\" + color.END, data_val.shape )","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:04:04.387132Z","iopub.execute_input":"2024-06-24T12:04:04.387577Z","iopub.status.idle":"2024-06-24T12:04:04.396844Z","shell.execute_reply.started":"2024-06-24T12:04:04.387536Z","shell.execute_reply":"2024-06-24T12:04:04.395420Z"}}},{"cell_type":"raw","source":"data_raw.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:26:32.461677Z","iopub.execute_input":"2024-06-22T16:26:32.462110Z","iopub.status.idle":"2024-06-22T16:26:32.643389Z","shell.execute_reply.started":"2024-06-22T16:26:32.462073Z","shell.execute_reply":"2024-06-22T16:26:32.642175Z"}}},{"cell_type":"raw","source":"data_val.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T17:10:55.528920Z","iopub.execute_input":"2024-06-22T17:10:55.529343Z","iopub.status.idle":"2024-06-22T17:10:55.700095Z","shell.execute_reply.started":"2024-06-22T17:10:55.529308Z","shell.execute_reply":"2024-06-22T17:10:55.698886Z"}}},{"cell_type":"raw","source":"#Data types\n\nprint(color.BOLD + \"Training data types:\" + color.END)\nprint(data_raw.dtypes)\nprint(\"------------------------------------------\")\nprint(\"------------------------------------------\")\nprint(color.BOLD + \"Testing Data types:\"+ color.END)\nprint(data_val.dtypes)","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:26:32.798023Z","iopub.execute_input":"2024-06-22T16:26:32.798381Z","iopub.status.idle":"2024-06-22T16:26:32.809918Z","shell.execute_reply.started":"2024-06-22T16:26:32.798351Z","shell.execute_reply":"2024-06-22T16:26:32.808504Z"}}},{"cell_type":"raw","source":"#Cardinality\n\nprint(color.BOLD + \"Cardinality of training data\" + color.END)\nprint(data_raw.nunique())\nprint(\"------------------------------------------\")\nprint(\"------------------------------------------\")\nprint(color.BOLD + \"Cardinality of testing data\" + color.END)\nprint(data_val.nunique())","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:26:32.811678Z","iopub.execute_input":"2024-06-22T16:26:32.812168Z","iopub.status.idle":"2024-06-22T16:26:32.875862Z","shell.execute_reply.started":"2024-06-22T16:26:32.812125Z","shell.execute_reply":"2024-06-22T16:26:32.874738Z"}}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"raw","source":"\n#Missing Value anaylsis\n\nprint(color.BOLD + \"Null values in training data :\"+ color.END, color.RED , data_raw.isnull().values.any() if data_raw.isnull().values.any() == True else color.GREEN , data_raw.isnull().values.any(), color.END)\nprint(color.BOLD + \"Null values in testing data :\"+ color.END,  color.RED , data_raw.isnull().values.any() if data_raw.isnull().values.any() == True else color.GREEN , data_raw.isnull().values.any(), color.END)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T08:08:39.417090Z","iopub.execute_input":"2024-06-25T08:08:39.417521Z","iopub.status.idle":"2024-06-25T08:08:39.473093Z","shell.execute_reply.started":"2024-06-25T08:08:39.417486Z","shell.execute_reply":"2024-06-25T08:08:39.471455Z"}}},{"cell_type":"code","source":"#data1.drop(\"Target\", axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.311937Z","iopub.execute_input":"2024-06-25T12:58:47.312444Z","iopub.status.idle":"2024-06-25T12:58:47.326831Z","shell.execute_reply.started":"2024-06-25T12:58:47.312402Z","shell.execute_reply":"2024-06-25T12:58:47.325229Z"},"trusted":true},"execution_count":192,"outputs":[]},{"cell_type":"code","source":"data1_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.331123Z","iopub.execute_input":"2024-06-25T12:58:47.331688Z","iopub.status.idle":"2024-06-25T12:58:47.370897Z","shell.execute_reply.started":"2024-06-25T12:58:47.331640Z","shell.execute_reply":"2024-06-25T12:58:47.369710Z"},"trusted":true},"execution_count":193,"outputs":[{"execution_count":193,"output_type":"execute_result","data":{"text/plain":"       Marital status  Application mode  Application order  Course  \\\nid                                                                   \n76518               1                 1                  1    9500   \n76519               1                 1                  1    9238   \n76520               1                 1                  1    9238   \n76521               1                44                  1    9147   \n76522               1                39                  1    9670   \n\n       Daytime/evening attendance  Previous qualification  \\\nid                                                          \n76518                           1                       1   \n76519                           1                       1   \n76520                           1                       1   \n76521                           1                      39   \n76522                           1                       1   \n\n       Previous qualification (grade)  Nacionality  Mother's qualification  \\\nid                                                                           \n76518                           141.0            1                       3   \n76519                           128.0            1                       1   \n76520                           118.0            1                       1   \n76521                           130.0            1                       1   \n76522                           110.0            1                       1   \n\n       Father's qualification  ...  \\\nid                             ...   \n76518                       1  ...   \n76519                      19  ...   \n76520                      19  ...   \n76521                      19  ...   \n76522                      37  ...   \n\n       Curricular units 1st sem (without evaluations)  \\\nid                                                      \n76518                                               0   \n76519                                               0   \n76520                                               0   \n76521                                               0   \n76522                                               0   \n\n       Curricular units 2nd sem (credited)  \\\nid                                           \n76518                                    0   \n76519                                    0   \n76520                                    0   \n76521                                    3   \n76522                                    0   \n\n       Curricular units 2nd sem (enrolled)  \\\nid                                           \n76518                                    8   \n76519                                    6   \n76520                                    6   \n76521                                    8   \n76522                                    6   \n\n       Curricular units 2nd sem (evaluations)  \\\nid                                              \n76518                                       0   \n76519                                       6   \n76520                                      11   \n76521                                      14   \n76522                                       9   \n\n       Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\nid                                                                             \n76518                                    0                          0.000000   \n76519                                    6                         13.500000   \n76520                                    5                         11.000000   \n76521                                    5                         11.000000   \n76522                                    4                         10.666667   \n\n       Curricular units 2nd sem (without evaluations)  Unemployment rate  \\\nid                                                                         \n76518                                               0               13.9   \n76519                                               0               11.1   \n76520                                               0               15.5   \n76521                                               0                8.9   \n76522                                               2                7.6   \n\n       Inflation rate   GDP  \nid                           \n76518            -0.3  0.79  \n76519             0.6  2.02  \n76520             2.8 -4.06  \n76521             1.4  3.51  \n76522             2.6  0.32  \n\n[5 rows x 36 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Marital status</th>\n      <th>Application mode</th>\n      <th>Application order</th>\n      <th>Course</th>\n      <th>Daytime/evening attendance</th>\n      <th>Previous qualification</th>\n      <th>Previous qualification (grade)</th>\n      <th>Nacionality</th>\n      <th>Mother's qualification</th>\n      <th>Father's qualification</th>\n      <th>...</th>\n      <th>Curricular units 1st sem (without evaluations)</th>\n      <th>Curricular units 2nd sem (credited)</th>\n      <th>Curricular units 2nd sem (enrolled)</th>\n      <th>Curricular units 2nd sem (evaluations)</th>\n      <th>Curricular units 2nd sem (approved)</th>\n      <th>Curricular units 2nd sem (grade)</th>\n      <th>Curricular units 2nd sem (without evaluations)</th>\n      <th>Unemployment rate</th>\n      <th>Inflation rate</th>\n      <th>GDP</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>76518</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>141.0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>13.9</td>\n      <td>-0.3</td>\n      <td>0.79</td>\n    </tr>\n    <tr>\n      <th>76519</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>128.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>13.500000</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n    </tr>\n    <tr>\n      <th>76520</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>118.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>11</td>\n      <td>5</td>\n      <td>11.000000</td>\n      <td>0</td>\n      <td>15.5</td>\n      <td>2.8</td>\n      <td>-4.06</td>\n    </tr>\n    <tr>\n      <th>76521</th>\n      <td>1</td>\n      <td>44</td>\n      <td>1</td>\n      <td>9147</td>\n      <td>1</td>\n      <td>39</td>\n      <td>130.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>14</td>\n      <td>5</td>\n      <td>11.000000</td>\n      <td>0</td>\n      <td>8.9</td>\n      <td>1.4</td>\n      <td>3.51</td>\n    </tr>\n    <tr>\n      <th>76522</th>\n      <td>1</td>\n      <td>39</td>\n      <td>1</td>\n      <td>9670</td>\n      <td>1</td>\n      <td>1</td>\n      <td>110.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>37</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>9</td>\n      <td>4</td>\n      <td>10.666667</td>\n      <td>2</td>\n      <td>7.6</td>\n      <td>2.6</td>\n      <td>0.32</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 36 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"raw","source":"data1.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:26:32.936499Z","iopub.execute_input":"2024-06-22T16:26:32.936881Z","iopub.status.idle":"2024-06-22T16:26:32.967794Z","shell.execute_reply.started":"2024-06-22T16:26:32.936850Z","shell.execute_reply":"2024-06-22T16:26:32.966506Z"}}},{"cell_type":"raw","source":"#Finding Duplicates\n\nprint(color.BOLD + \"Duplicate data in Dataframe:\" + color.END, data1.duplicated(keep='first').sum(), \"|\", round(data1.duplicated(keep='first').sum()/data1.duplicated(keep='first').count(), 2),\"%\")","metadata":{"execution":{"iopub.status.busy":"2024-06-22T16:26:32.969671Z","iopub.execute_input":"2024-06-22T16:26:32.970170Z","iopub.status.idle":"2024-06-22T16:26:33.137227Z","shell.execute_reply.started":"2024-06-22T16:26:32.970130Z","shell.execute_reply":"2024-06-22T16:26:33.135850Z"}}},{"cell_type":"markdown","source":"**Data Description**\n* No Missing Value\n* ","metadata":{}},{"cell_type":"code","source":"data1['Target'].head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.372475Z","iopub.execute_input":"2024-06-25T12:58:47.372867Z","iopub.status.idle":"2024-06-25T12:58:47.385601Z","shell.execute_reply.started":"2024-06-25T12:58:47.372836Z","shell.execute_reply":"2024-06-25T12:58:47.384239Z"},"trusted":true},"execution_count":194,"outputs":[{"execution_count":194,"output_type":"execute_result","data":{"text/plain":"id\n0    Graduate\n1     Dropout\n2     Dropout\n3    Enrolled\n4    Graduate\nName: Target, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# Apply label encoding to the Target Graduate-2, Enrolled - 1, Dropout - 0\nlabel_encoder = LabelEncoder()\n\ndata1['Target'] = label_encoder.fit_transform(data1['Target'])","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.387606Z","iopub.execute_input":"2024-06-25T12:58:47.388440Z","iopub.status.idle":"2024-06-25T12:58:47.422183Z","shell.execute_reply.started":"2024-06-25T12:58:47.388388Z","shell.execute_reply":"2024-06-25T12:58:47.420536Z"},"trusted":true},"execution_count":195,"outputs":[]},{"cell_type":"code","source":"data1['Target'].head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.423687Z","iopub.execute_input":"2024-06-25T12:58:47.424176Z","iopub.status.idle":"2024-06-25T12:58:47.434177Z","shell.execute_reply.started":"2024-06-25T12:58:47.424133Z","shell.execute_reply":"2024-06-25T12:58:47.432961Z"},"trusted":true},"execution_count":196,"outputs":[{"execution_count":196,"output_type":"execute_result","data":{"text/plain":"id\n0    2\n1    0\n2    0\n3    1\n4    2\nName: Target, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"# Exploratory Data Analysis (EDA)","metadata":{}},{"cell_type":"raw","source":"# Quantative or Numerical Features \n# Filter discrete features programtically as most of them are discrete\n\ncontinous_features= [\"Previous qualification\",\"Admission grade\",\"Unemployment rate\",\"Inflation rate\", \"GDP\"]\ndiscrete_features = data1.select_dtypes(include=['number']).drop(columns=continous_features).columns\n\ntotal_numerical_features = data1.select_dtypes(include=['number']).drop(columns='Target').columns # continous + discrete\n\n\n# Qualitative or Categorical Features\nnominal_features = None\nordinal_features = None\n\nprint(total_numerical_features)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:51:20.112742Z","iopub.execute_input":"2024-06-24T12:51:20.113178Z","iopub.status.idle":"2024-06-24T12:51:20.173003Z","shell.execute_reply.started":"2024-06-24T12:51:20.113144Z","shell.execute_reply":"2024-06-24T12:51:20.171774Z"}}},{"cell_type":"raw","source":"# Target Distribution\ndata1['Target'].value_counts().plot(kind='pie', autopct='%1.1f%%')\nplt.title('Target Distribution')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:51:20.174655Z","iopub.execute_input":"2024-06-24T12:51:20.175310Z","iopub.status.idle":"2024-06-24T12:51:20.401473Z","shell.execute_reply.started":"2024-06-24T12:51:20.175278Z","shell.execute_reply":"2024-06-24T12:51:20.399913Z"}}},{"cell_type":"raw","source":"# Calculate the class proportions\nclass_proportions = data1['Target'].value_counts(normalize=True)\nprint(class_proportions)\n\n# Calculate the imbalance ratio\nimbalance_ratio = class_proportions.max() / class_proportions.min()\nprint(f'Imbalance Ratio: {imbalance_ratio:.2f}')","metadata":{}},{"cell_type":"markdown","source":"**Relation between features and targets**","metadata":{}},{"cell_type":"raw","source":"\n# Calculate mutual information\n\nmi = mutual_info_classif(data1, data1.Target, discrete_features='auto', random_state=1)\n\n# Create a DataFrame to display MI scores\nmi_scores = pd.DataFrame({'Feature': data1.columns, 'MI Score': mi})\nmi_scores = mi_scores.sort_values(by='MI Score', ascending=False)\n\nprint(color.BOLD + \"MI scores in descending order\" + color.END)\nmi_scores\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:51:20.436609Z","iopub.execute_input":"2024-06-24T12:51:20.437833Z","iopub.status.idle":"2024-06-24T12:51:35.908457Z","shell.execute_reply.started":"2024-06-24T12:51:20.437747Z","shell.execute_reply":"2024-06-24T12:51:35.907154Z"}}},{"cell_type":"raw","source":"# Visualizing feature distributions\n\ndata1.hist(bins=40, figsize=(25, 20))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:08:38.895063Z","iopub.execute_input":"2024-06-24T13:08:38.895511Z","iopub.status.idle":"2024-06-24T13:08:48.367821Z","shell.execute_reply.started":"2024-06-24T13:08:38.895480Z","shell.execute_reply":"2024-06-24T13:08:48.366457Z"}}},{"cell_type":"raw","source":"# Correlation heatmap\n\n# function for correlation heatmap\n\ndef plot_correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(14, 12))\n    colormap = sns.diverging_palette(220, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        #center=True,\n        cmap = 'coolwarm',\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmin=-1, vmax=1.0, linecolor='white',\n        annot_kws={'fontsize': 5 }\n    )\n    plt.title('Correlation of Features', y=1.05, size=15)\n    \n\nplot_correlation_heatmap(data1)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:51:44.694789Z","iopub.execute_input":"2024-06-24T12:51:44.695128Z","iopub.status.idle":"2024-06-24T12:51:50.050672Z","shell.execute_reply.started":"2024-06-24T12:51:44.695100Z","shell.execute_reply":"2024-06-24T12:51:50.049527Z"}}},{"cell_type":"raw","source":"# Violin plot to see distribution of numerical feature across target classes\ndef plot_violinplot(df):\n    num_features = len(total_numerical_features)\n    plot_cols = 3\n    plot_rows = math.ceil(num_features / plot_cols)\n    _ , ax = plt.subplots(plot_rows, plot_cols, figsize =(15, plot_rows * 5))\n    ax = ax.flatten()\n    for i,ft in enumerate(total_numerical_features):\n        sns.violinplot(x='Target', y=ft, data=df, ax=ax[i])\n        ax[i].set_title(f' {ft} vs Target')\n        ax[i].set_xlabel('Target')\n        ax[i].set_ylabel(ft)\n    \n    plt.tight_layout()\n    plt.show()\n    \n\n\nplot_violinplot(data1)\n    \n    \n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:51:50.052277Z","iopub.execute_input":"2024-06-24T12:51:50.052701Z","iopub.status.idle":"2024-06-24T12:52:11.702008Z","shell.execute_reply.started":"2024-06-24T12:51:50.052666Z","shell.execute_reply":"2024-06-24T12:52:11.700886Z"}}},{"cell_type":"raw","source":"# Box plot to see relationship between numerical feature and target\n\ndef plot_boxplot(df):\n    num_features = len(total_numerical_features)\n    plot_cols = 3\n    plot_rows = math.ceil(num_features / plot_cols)\n    _ , ax = plt.subplots(plot_rows, plot_cols, figsize =(15, plot_rows * 5))\n    ax = ax.flatten()\n    for i,ft in enumerate(total_numerical_features):\n        sns.boxplot(x='Target', y=ft, data=df, ax=ax[i])\n        ax[i].set_title(f' {ft} vs Target')\n        ax[i].set_xlabel('Target')\n        ax[i].set_ylabel(ft)\n    \n    plt.tight_layout()\n    plt.show()\n    \n\n\nplot_boxplot(data1)\n    \n\n    \n    ","metadata":{"execution":{"iopub.status.busy":"2024-06-24T12:52:11.703529Z","iopub.execute_input":"2024-06-24T12:52:11.703941Z","iopub.status.idle":"2024-06-24T12:52:20.965818Z","shell.execute_reply.started":"2024-06-24T12:52:11.703906Z","shell.execute_reply":"2024-06-24T12:52:20.964607Z"}}},{"cell_type":"markdown","source":"# scatter plot???","metadata":{}},{"cell_type":"raw","source":"# Outlier detection using IQR instead of Z-Score as data is not normally distibuted\n\ndef identify_features_with_outliers(df):\n    outliers = pd.DataFrame()\n    #outliers = pd.DataFrame(columns=['feature', 'outliers count', 'Outlier\\'s Percentage%'])\n    total_data=df.shape[0]\n    print(total_data)\n    for i, feature in enumerate(df):\n        count = 0\n        # Calculate Q1 (25th percentile) and Q3 (75th percentile)\n        Q1 = df[feature].quantile(0.25)\n        Q3 = df[feature].quantile(0.75)\n        IQR = Q3 - Q1\n\n        # Define the outlier boundaries\n        lower_bound = Q1 - 1.5 * IQR\n        upper_bound = Q3 + 1.5 * IQR\n        \n\n        # Identify outliers\n        \n        count = len(df[(df[feature] < lower_bound) | (df[feature] > upper_bound)])\n        \n        percentage = round((count*100)/df.shape[0],2)\n        outliers = pd.concat([outliers, pd.DataFrame({'Features': [feature], 'Outliers count': [count],  'Outliers Percentage%': [percentage]})], ignore_index=True)\n        outliers=outliers.sort_values(by='Outliers count', ascending=False)       \n    return outliers\n             \noutliers = identify_features_with_outliers(data1)\noutliers\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:06:41.351562Z","iopub.execute_input":"2024-06-24T13:06:41.352866Z","iopub.status.idle":"2024-06-24T13:06:41.653602Z","shell.execute_reply.started":"2024-06-24T13:06:41.352811Z","shell.execute_reply":"2024-06-24T13:06:41.652434Z"}}},{"cell_type":"raw","source":"len(data1[(data1['Curricular units 2nd sem (enrolled)']==0) & (data1['Curricular units 1st sem (enrolled)']==0) & (data1['Target'] == 0)] )","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:25:38.031624Z","iopub.execute_input":"2024-06-24T16:25:38.032979Z","iopub.status.idle":"2024-06-24T16:25:38.044478Z","shell.execute_reply.started":"2024-06-24T16:25:38.032940Z","shell.execute_reply":"2024-06-24T16:25:38.043048Z"}}},{"cell_type":"raw","source":"# Plot distribution of grades by Target outcome\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\ndata1[data1['Target'] == 0]['Curricular units 2nd sem (grade)'].hist(ax=ax[0], bins=20, alpha=0.5, color='red')\ndata1[data1['Target'] == 1]['Curricular units 2nd sem (grade)'].hist(ax=ax[0], bins=20, alpha=0.5, color='blue')\ndata1[data1['Target'] == 2]['Curricular units 2nd sem (grade)'].hist(ax=ax[0], bins=20, alpha=0.5, color='green')\nax[0].set_title('2nd Semester Grades')\nax[0].legend(['Dropout', 'Enrolled', 'Graduate'])\n\ndata1[data1['Target'] == 0]['Curricular units 1st sem (grade)'].hist(ax=ax[1], bins=20, alpha=0.5, color='red')\ndata1[data1['Target'] == 1]['Curricular units 1st sem (grade)'].hist(ax=ax[1], bins=20, alpha=0.5, color='blue')\ndata1[data1['Target'] == 2]['Curricular units 1st sem (grade)'].hist(ax=ax[1], bins=20, alpha=0.5, color='green')\nax[1].set_title('1st Semester Grades')\nax[1].legend(['Dropout', 'Enrolled', 'Graduate'])\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:25:41.687785Z","iopub.execute_input":"2024-06-24T16:25:41.688759Z","iopub.status.idle":"2024-06-24T16:25:42.602595Z","shell.execute_reply.started":"2024-06-24T16:25:41.688715Z","shell.execute_reply":"2024-06-24T16:25:42.601281Z"}}},{"cell_type":"raw","source":"# Plot distribution of grades by Target outcome\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\ndata1[data1['Target'] == 0]['Curricular units 2nd sem (evaluations)'].hist(ax=ax[0], bins=20, alpha=0.5, color='red')\ndata1[data1['Target'] == 1]['Curricular units 2nd sem (evaluations)'].hist(ax=ax[0], bins=20, alpha=0.5, color='blue')\ndata1[data1['Target'] == 2]['Curricular units 2nd sem (evaluations)'].hist(ax=ax[0], bins=20, alpha=0.5, color='green')\nax[0].set_title('2nd Semester  evaluations')\nax[0].legend(['Dropout', 'Enrolled', 'Graduate'])\n\ndata1[data1['Target'] == 0]['Curricular units 1st sem (evaluations)'].hist(ax=ax[1], bins=20, alpha=0.5, color='red')\ndata1[data1['Target'] == 1]['Curricular units 1st sem (evaluations)'].hist(ax=ax[1], bins=20, alpha=0.5, color='blue')\ndata1[data1['Target'] == 2]['Curricular units 1st sem (evaluations)'].hist(ax=ax[1], bins=20, alpha=0.5, color='green')\nax[1].set_title('1st Semester evaluations')\nax[1].legend(['Dropout', 'Enrolled', 'Graduate'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:25:46.091259Z","iopub.execute_input":"2024-06-24T16:25:46.091714Z","iopub.status.idle":"2024-06-24T16:25:46.990238Z","shell.execute_reply.started":"2024-06-24T16:25:46.091678Z","shell.execute_reply":"2024-06-24T16:25:46.988881Z"}}},{"cell_type":"code","source":"\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Feature Selection","metadata":{}},{"cell_type":"markdown","source":"**Drop Unimportant Features**","metadata":{}},{"cell_type":"code","source":"\ndata1.drop(['Inflation rate',\n            'Curricular units 2nd sem (without evaluations)',\n            'Curricular units 1st sem (without evaluations)',\n            'International',\n            'Curricular units 1st sem (credited)',\n            'Educational special needs',\n            'Curricular units 2nd sem (credited)',\n            'Nacionality'],axis=1,inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.435841Z","iopub.execute_input":"2024-06-25T12:58:47.436330Z","iopub.status.idle":"2024-06-25T12:58:47.453352Z","shell.execute_reply.started":"2024-06-25T12:58:47.436284Z","shell.execute_reply":"2024-06-25T12:58:47.451791Z"},"trusted":true},"execution_count":197,"outputs":[]},{"cell_type":"code","source":"data1_test.drop(['Inflation rate',\n            'Curricular units 2nd sem (without evaluations)',\n            'Curricular units 1st sem (without evaluations)',\n            'International',\n            'Curricular units 1st sem (credited)',\n            'Educational special needs',\n            'Curricular units 2nd sem (credited)',\n            'Nacionality'],axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.455178Z","iopub.execute_input":"2024-06-25T12:58:47.455673Z","iopub.status.idle":"2024-06-25T12:58:47.467665Z","shell.execute_reply.started":"2024-06-25T12:58:47.455605Z","shell.execute_reply":"2024-06-25T12:58:47.466030Z"},"trusted":true},"execution_count":198,"outputs":[]},{"cell_type":"markdown","source":"# Feature Engineering","metadata":{}},{"cell_type":"code","source":"#Removal of outliers related to Curricular units 2nd sem==0 ,Curricular units 1st sem (grade) == 0\n\n# Calculate the mean or median grade for non-zero grades for enrolled and graduate students\nmean_grade_enrolled = data1[(data1['Target'] == 1) & (data1['Curricular units 2nd sem (grade)'] > 0)]['Curricular units 2nd sem (grade)'].mean()\nmean_grade_graduate = data1[(data1['Target'] == 2) & (data1['Curricular units 2nd sem (grade)'] > 0)]['Curricular units 2nd sem (grade)'].mean()\n\n# Replace zero grades for enrolled and graduates\ndata1.loc[(data1['Target'] == 1) & (data1['Curricular units 2nd sem (grade)'] == 0), 'Curricular units 2nd sem (grade)'] = mean_grade_enrolled\ndata1.loc[(data1['Target'] == 2) & (data1['Curricular units 2nd sem (grade)'] == 0), 'Curricular units 2nd sem (grade)'] = mean_grade_graduate\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.472822Z","iopub.execute_input":"2024-06-25T12:58:47.473379Z","iopub.status.idle":"2024-06-25T12:58:47.496487Z","shell.execute_reply.started":"2024-06-25T12:58:47.473344Z","shell.execute_reply":"2024-06-25T12:58:47.495185Z"},"trusted":true},"execution_count":199,"outputs":[]},{"cell_type":"code","source":"# Calculate the mean or median grade for non-zero grades for enrolled and graduate students\nmean_grade_enrolled = data1[(data1['Target'] == 1) & (data1['Curricular units 1st sem (grade)'] > 0)]['Curricular units 1st sem (grade)'].mean()\nmean_grade_graduate = data1[(data1['Target'] == 2) & (data1['Curricular units 1st sem (grade)'] > 0)]['Curricular units 1st sem (grade)'].mean()\n\n# Replace zero grades for enrolled and graduates\ndata1.loc[(data1['Target'] == 1) & (data1['Curricular units 1st sem (grade)'] == 0), 'Curricular units 1st sem (grade)'] = mean_grade_enrolled\ndata1.loc[(data1['Target'] == 2) & (data1['Curricular units 1st sem (grade)'] == 0), 'Curricular units 1st sem (grade)'] = mean_grade_graduate\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.498234Z","iopub.execute_input":"2024-06-25T12:58:47.498780Z","iopub.status.idle":"2024-06-25T12:58:47.525101Z","shell.execute_reply.started":"2024-06-25T12:58:47.498735Z","shell.execute_reply":"2024-06-25T12:58:47.523523Z"},"trusted":true},"execution_count":200,"outputs":[]},{"cell_type":"raw","source":"#Feature engineering for Curricular units 1st sem (enrolled) and Curricular units 2nd sem (enrolled)\ndata1['enrollment_1st_sem']=data1['Curricular units 1st sem (enrolled)'].apply(lambda x: 0 if x == 0 else 1)\ndata1['enrollment_2nd_sem']=data1['Curricular units 2nd sem (enrolled)'].apply(lambda x: 0 if x == 0 else 1)\n\ndata1_test['enrollment_1st_sem']=data1['Curricular units 1st sem (enrolled)'].apply(lambda x: 0 if x == 0 else 1)\ndata1_test['enrollment_2nd_sem']=data1['Curricular units 2nd sem (enrolled)'].apply(lambda x: 0 if x == 0 else 1)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T11:58:19.134280Z","iopub.execute_input":"2024-06-25T11:58:19.134716Z","iopub.status.idle":"2024-06-25T11:58:19.412899Z","shell.execute_reply.started":"2024-06-25T11:58:19.134679Z","shell.execute_reply":"2024-06-25T11:58:19.411424Z"}}},{"cell_type":"raw","source":"data1.drop(['Curricular units 1st sem (enrolled)','Curricular units 2nd sem (enrolled)' ],axis=1,inplace=True)\ndata1_test.drop(['Curricular units 1st sem (enrolled)','Curricular units 2nd sem (enrolled)' ],axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:24:33.005579Z","iopub.execute_input":"2024-06-25T12:24:33.006172Z","iopub.status.idle":"2024-06-25T12:24:33.022473Z","shell.execute_reply.started":"2024-06-25T12:24:33.006127Z","shell.execute_reply":"2024-06-25T12:24:33.021102Z"}}},{"cell_type":"code","source":"# Creation of two new features Income Group, Intellectuality from Mother's and Father's Occupations\n# Intellectuality NOT Being used now\noccupation = [\n    (0, \"Student\", \"Low\", \"Mid\"),\n    (1, \"Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers\", \"High\", \"High\"),\n    (2, \"Specialists in Intellectual and Scientific Activities\", \"High\", \"High\"),\n    (3, \"Intermediate Level Technicians and Professions\", \"Mid\", \"Mid\"),\n    (4, \"Administrative staff\", \"Mid\", \"Mid\"),\n    (5, \"Personal Services, Security and Safety Workers and Sellers\", \"Low\", \"Low\"),\n    (6, \"Farmers and Skilled Workers in Agriculture, Fisheries and Forestry\", \"Low\", \"Low\"),\n    (7, \"Skilled Workers in Industry, Construction and Craftsmen\", \"Mid\", \"Mid\"),\n    (8, \"Installation and Machine Operators and Assembly Workers\", \"Low\", \"Low\"),\n    (9, \"Unskilled Workers\", \"Low\", \"Low\"),\n    (10, \"Armed Forces Professions\", \"Mid\", \"Mid\"),\n    (90, \"Other Situation\", \"Low\", \"Low\"),\n    (99, \"(blank)\", \"Low\", \"Low\"),\n    (101, \"Armed Forces Officers\", \"High\", \"Mid\"),\n    (102, \"Armed Forces Sergeants\", \"Mid\", \"Mid\"),\n    (103, \"Other Armed Forces personnel\", \"Mid\", \"Mid\"),\n    (112, \"Directors of administrative and commercial services\", \"High\", \"High\"),\n    (114, \"Hotel, catering, trade and other services directors\", \"High\", \"Mid\"),\n    (121, \"Specialists in the physical sciences, mathematics, engineering and related techniques\", \"High\", \"High\"),\n    (122, \"Health professionals\", \"High\", \"High\"),\n    (123, \"Teachers\", \"Mid\", \"High\"),\n    (124, \"Specialists in finance, accounting, administrative organization, public and commercial relations\", \"High\", \"High\"),\n    (125, \"Specialists in information and communication technologies (ICT)\", \"High\", \"Mid\"),\n    (131, \"Intermediate level science and engineering technicians and professions\", \"Mid\", \"Mid\"),\n    (132, \"Technicians and professionals, of intermediate level of health\", \"Mid\", \"Mid\"),\n    (134, \"Intermediate level technicians from legal, social, sports, cultural and similar services\", \"Mid\", \"Mid\"),\n    (135, \"Information and communication technology technicians\", \"Mid\", \"Mid\"),\n    (141, \"Office workers, secretaries in general and data processing operators\", \"Mid\", \"Mid\"),\n    (143, \"Data, accounting, statistical, financial services and registry-related operators\", \"Mid\", \"Mid\"),\n    (144, \"Other administrative support staff\", \"Low\", \"Low\"),\n    (151, \"Personal service workers\", \"Low\", \"Low\"),\n    (152, \"Sellers\", \"Low\", \"Low\"),\n    (153, \"Personal care workers and the like\", \"Low\", \"Low\"),\n    (154, \"Protection and security services personnel\", \"Low\", \"Low\"),\n    (161, \"Market-oriented farmers and skilled agricultural and animal production workers\", \"Low\", \"Low\"),\n    (163, \"Farmers, livestock keepers, fishermen, hunters and gatherers, subsistence\", \"Low\", \"Low\"),\n    (171, \"Skilled construction workers and the like, except electricians\", \"Mid\", \"Mid\"),\n    (172, \"Skilled workers in metallurgy, metalworking and similar\", \"Mid\", \"Mid\"),\n    (173, \"Skilled workers in printing, precision instrument manufacturing, jewelers, artisans and the like\", \"Mid\", \"Mid\"),\n    (174, \"Skilled workers in electricity and electronics\", \"Mid\", \"Mid\"),\n    (175, \"Workers in food processing, woodworking, clothing and other industries and crafts\", \"Low\", \"Low\"),\n    (181, \"Fixed plant and machine operators\", \"Low\", \"Low\"),\n    (182, \"Assembly workers\", \"Low\", \"Low\"),\n    (183, \"Vehicle drivers and mobile equipment operators\", \"Low\", \"Low\"),\n    (191, \"cleaning workers\",\"Low\", \"Low\"),\n    (192, \"Unskilled workers in agriculture, animal production, fisheries and forestry\", \"Low\", \"Low\"),\n    (193, \"Unskilled workers in extractive industry, construction, manufacturing and transport\", \"Low\", \"Low\"),\n    (194, \"Meal preparation assistants\", \"Low\", \"Low\"),\n    (195, \"Street vendors (except food) and street service providers\", \"Low\", \"Low\")\n]\n\n# Create DataFrame\n#df = pd.DataFrame(data, columns=[\"Code\", \"Occupation\", \"Income Group\", \"Intellectuality\"])\n\n\n\n# Create a dictionary for mapping\nlookup_income = {item[0]: item[2] for item in occupation}\nlookup_intellect = {item[0]: item[3] for item in occupation}\n\n# creating new feature on Mother and Father income using the lookup dictionary\ndata1['Mother Income'] = data1['Mother\\'s occupation'].map(lookup_income).fillna('Low')\ndata1['Father Income'] = data1['Father\\'s occupation'].map(lookup_income).fillna('Low')\n\ndata1_test['Mother Income'] = data1_test['Mother\\'s occupation'].map(lookup_income).fillna('Low')\ndata1_test['Father Income'] = data1_test['Father\\'s occupation'].map(lookup_income).fillna('Low')","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.526837Z","iopub.execute_input":"2024-06-25T12:58:47.527307Z","iopub.status.idle":"2024-06-25T12:58:47.600170Z","shell.execute_reply.started":"2024-06-25T12:58:47.527259Z","shell.execute_reply":"2024-06-25T12:58:47.598521Z"},"trusted":true},"execution_count":201,"outputs":[]},{"cell_type":"markdown","source":"# ****Replace Unknown for median??? - already Done","metadata":{}},{"cell_type":"code","source":"\nfeatures_to_ordinal_encode = ['Mother Income', 'Father Income']\n\n\nencoder = OrdinalEncoder(categories=[['Low', 'Mid', 'High'], ['Low', 'Mid', 'High']])\nencoded_data1=encoder.fit_transform(data1[features_to_ordinal_encode])\nencoded_test=encoder.transform(data1_test[features_to_ordinal_encode])\n\nencoded_data1_df = pd.DataFrame(encoded_data1, columns=features_to_ordinal_encode, index=data1.index)\nencoded_test_df = pd.DataFrame(encoded_test, columns=features_to_ordinal_encode, index=data1_test.index)\n\ndata1['Mother Income'] = encoded_data1_df['Mother Income']\ndata1_test['Mother Income'] = encoded_test_df['Mother Income']\n\ndata1['Father Income'] = encoded_data1_df['Father Income']\ndata1_test['Father Income'] = encoded_test_df['Father Income']\n\ndata1.drop(['Mother\\'s occupation','Father\\'s occupation'],axis=1,inplace=True)\ndata1_test.drop(['Mother\\'s occupation','Father\\'s occupation'],axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.601986Z","iopub.execute_input":"2024-06-25T12:58:47.602393Z","iopub.status.idle":"2024-06-25T12:58:47.710387Z","shell.execute_reply.started":"2024-06-25T12:58:47.602360Z","shell.execute_reply":"2024-06-25T12:58:47.709140Z"},"trusted":true},"execution_count":202,"outputs":[]},{"cell_type":"raw","source":"#high mutual information features\nhigh_MI_features= ['Curricular units 2nd sem (approved)', 'Curricular units 2nd sem (grade)', 'Curricular units 1st sem (approved)', 'Curricular units 1st sem (grade)']\n\n#everything will be clubbed soon\ncategorical_columns=high_MI_features\n\n# Function to perform target encoding on training data\ndef target_encode(train, test, target, categorical_columns):\n    for col in categorical_columns:\n        means = train.groupby(col)[target].mean()\n        train[col + '_encoded'] = train[col].map(means)\n        test[col + '_encoded'] = test[col].map(means)\n    return train, test\n\n# Function to apply target encoding to test data\ndef apply_target_encoding(test, means, categorical_columns):\n    \n    for col in categorical_columns:\n        print(means)\n        test[col + '_encoded'] = test[col].map(means[col])\n    return test\n\n# Apply encoding to train data\nencoded_train_df, encoded_test_df = target_encode(data1, data1_test,'Target', categorical_columns)\n\n\n# Apply encoding to test data\n#encoded_test_df = apply_target_encoding(data1_test.copy(), encoding_means, categorical_columns)\n\n# Drop original categorical columns if needed\ndata1 = data1.drop(columns=categorical_columns)\ndata1_test=data1_test.drop(columns=categorical_columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-23T06:06:33.943536Z","iopub.execute_input":"2024-06-23T06:06:33.943909Z","iopub.status.idle":"2024-06-23T06:06:33.989319Z","shell.execute_reply.started":"2024-06-23T06:06:33.943881Z","shell.execute_reply":"2024-06-23T06:06:33.988275Z"}}},{"cell_type":"markdown","source":"# Data Preperation","metadata":{}},{"cell_type":"code","source":"X = data1.drop(columns='Target')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.711929Z","iopub.execute_input":"2024-06-25T12:58:47.712321Z","iopub.status.idle":"2024-06-25T12:58:47.721847Z","shell.execute_reply.started":"2024-06-25T12:58:47.712289Z","shell.execute_reply":"2024-06-25T12:58:47.720449Z"},"trusted":true},"execution_count":203,"outputs":[]},{"cell_type":"markdown","source":"**Handling Outliers**","metadata":{}},{"cell_type":"raw","source":"scaler = RobustScaler()\n\n# Fit and transform the data\nscaled_data = scaler.fit_transform(X)\n\n# Convert back to DataFrame if needed\nX = pd.DataFrame(scaled_data, columns=X.columns)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T16:41:26.345976Z","iopub.execute_input":"2024-06-24T16:41:26.346454Z","iopub.status.idle":"2024-06-24T16:41:26.455164Z","shell.execute_reply.started":"2024-06-24T16:41:26.346407Z","shell.execute_reply":"2024-06-24T16:41:26.453549Z"}}},{"cell_type":"code","source":"X.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.723302Z","iopub.execute_input":"2024-06-25T12:58:47.723680Z","iopub.status.idle":"2024-06-25T12:58:47.755130Z","shell.execute_reply.started":"2024-06-25T12:58:47.723611Z","shell.execute_reply":"2024-06-25T12:58:47.753881Z"},"trusted":true},"execution_count":204,"outputs":[{"execution_count":204,"output_type":"execute_result","data":{"text/plain":"    Marital status  Application mode  Application order  Course  \\\nid                                                                \n0                1                 1                  1    9238   \n1                1                17                  1    9238   \n2                1                17                  2    9254   \n3                1                 1                  3    9500   \n4                1                 1                  2    9500   \n\n    Daytime/evening attendance  Previous qualification  \\\nid                                                       \n0                            1                       1   \n1                            1                       1   \n2                            1                       1   \n3                            1                       1   \n4                            1                       1   \n\n    Previous qualification (grade)  Mother's qualification  \\\nid                                                           \n0                            126.0                       1   \n1                            125.0                      19   \n2                            137.0                       3   \n3                            131.0                      19   \n4                            132.0                      19   \n\n    Father's qualification  Admission grade  ...  \\\nid                                           ...   \n0                       19            122.6  ...   \n1                       19            119.8  ...   \n2                       19            144.7  ...   \n3                        3            126.1  ...   \n4                       37            120.1  ...   \n\n    Curricular units 1st sem (approved)  Curricular units 1st sem (grade)  \\\nid                                                                          \n0                                     6                         14.500000   \n1                                     4                         11.600000   \n2                                     0                          0.000000   \n3                                     7                         12.591250   \n4                                     6                         12.933333   \n\n    Curricular units 2nd sem (enrolled)  \\\nid                                        \n0                                     6   \n1                                     6   \n2                                     6   \n3                                     8   \n4                                     7   \n\n    Curricular units 2nd sem (evaluations)  \\\nid                                           \n0                                        7   \n1                                        9   \n2                                        0   \n3                                       11   \n4                                       12   \n\n    Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\nid                                                                          \n0                                     6                         12.428571   \n1                                     0                          0.000000   \n2                                     0                          0.000000   \n3                                     7                         12.820000   \n4                                     6                         12.933333   \n\n    Unemployment rate   GDP  Mother Income  Father Income  \nid                                                         \n0                11.1  2.02            0.0            0.0  \n1                11.1  2.02            0.0            0.0  \n2                16.2 -0.92            2.0            1.0  \n3                11.1  2.02            1.0            2.0  \n4                 7.6  0.32            1.0            0.0  \n\n[5 rows x 28 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Marital status</th>\n      <th>Application mode</th>\n      <th>Application order</th>\n      <th>Course</th>\n      <th>Daytime/evening attendance</th>\n      <th>Previous qualification</th>\n      <th>Previous qualification (grade)</th>\n      <th>Mother's qualification</th>\n      <th>Father's qualification</th>\n      <th>Admission grade</th>\n      <th>...</th>\n      <th>Curricular units 1st sem (approved)</th>\n      <th>Curricular units 1st sem (grade)</th>\n      <th>Curricular units 2nd sem (enrolled)</th>\n      <th>Curricular units 2nd sem (evaluations)</th>\n      <th>Curricular units 2nd sem (approved)</th>\n      <th>Curricular units 2nd sem (grade)</th>\n      <th>Unemployment rate</th>\n      <th>GDP</th>\n      <th>Mother Income</th>\n      <th>Father Income</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>126.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>122.6</td>\n      <td>...</td>\n      <td>6</td>\n      <td>14.500000</td>\n      <td>6</td>\n      <td>7</td>\n      <td>6</td>\n      <td>12.428571</td>\n      <td>11.1</td>\n      <td>2.02</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>17</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>125.0</td>\n      <td>19</td>\n      <td>19</td>\n      <td>119.8</td>\n      <td>...</td>\n      <td>4</td>\n      <td>11.600000</td>\n      <td>6</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>11.1</td>\n      <td>2.02</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>17</td>\n      <td>2</td>\n      <td>9254</td>\n      <td>1</td>\n      <td>1</td>\n      <td>137.0</td>\n      <td>3</td>\n      <td>19</td>\n      <td>144.7</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>16.2</td>\n      <td>-0.92</td>\n      <td>2.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>131.0</td>\n      <td>19</td>\n      <td>3</td>\n      <td>126.1</td>\n      <td>...</td>\n      <td>7</td>\n      <td>12.591250</td>\n      <td>8</td>\n      <td>11</td>\n      <td>7</td>\n      <td>12.820000</td>\n      <td>11.1</td>\n      <td>2.02</td>\n      <td>1.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>132.0</td>\n      <td>19</td>\n      <td>37</td>\n      <td>120.1</td>\n      <td>...</td>\n      <td>6</td>\n      <td>12.933333</td>\n      <td>7</td>\n      <td>12</td>\n      <td>6</td>\n      <td>12.933333</td>\n      <td>7.6</td>\n      <td>0.32</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 28 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# ","metadata":{}},{"cell_type":"markdown","source":"# 🤖 Model Selection","metadata":{}},{"cell_type":"code","source":"y = pd.DataFrame()\ny.loc[:, 'Target'] = data1.loc[:, 'Target']\n\ny.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.757174Z","iopub.execute_input":"2024-06-25T12:58:47.757681Z","iopub.status.idle":"2024-06-25T12:58:47.777103Z","shell.execute_reply.started":"2024-06-25T12:58:47.757612Z","shell.execute_reply":"2024-06-25T12:58:47.775613Z"},"trusted":true},"execution_count":205,"outputs":[{"execution_count":205,"output_type":"execute_result","data":{"text/plain":"    Target\nid        \n0        2\n1        0\n2        0\n3        1\n4        2","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Target</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.778811Z","iopub.execute_input":"2024-06-25T12:58:47.779319Z","iopub.status.idle":"2024-06-25T12:58:47.791709Z","shell.execute_reply.started":"2024-06-25T12:58:47.779265Z","shell.execute_reply":"2024-06-25T12:58:47.790341Z"},"trusted":true},"execution_count":206,"outputs":[{"execution_count":206,"output_type":"execute_result","data":{"text/plain":"Index(['Marital status', 'Application mode', 'Application order', 'Course',\n       'Daytime/evening attendance', 'Previous qualification',\n       'Previous qualification (grade)', 'Mother's qualification',\n       'Father's qualification', 'Admission grade', 'Displaced', 'Debtor',\n       'Tuition fees up to date', 'Gender', 'Scholarship holder',\n       'Age at enrollment', 'Curricular units 1st sem (enrolled)',\n       'Curricular units 1st sem (evaluations)',\n       'Curricular units 1st sem (approved)',\n       'Curricular units 1st sem (grade)',\n       'Curricular units 2nd sem (enrolled)',\n       'Curricular units 2nd sem (evaluations)',\n       'Curricular units 2nd sem (approved)',\n       'Curricular units 2nd sem (grade)', 'Unemployment rate', 'GDP',\n       'Mother Income', 'Father Income'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"data1_test.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-25T12:58:47.793236Z","iopub.execute_input":"2024-06-25T12:58:47.793714Z","iopub.status.idle":"2024-06-25T12:58:47.806573Z","shell.execute_reply.started":"2024-06-25T12:58:47.793671Z","shell.execute_reply":"2024-06-25T12:58:47.805135Z"},"trusted":true},"execution_count":207,"outputs":[{"execution_count":207,"output_type":"execute_result","data":{"text/plain":"Index(['Marital status', 'Application mode', 'Application order', 'Course',\n       'Daytime/evening attendance', 'Previous qualification',\n       'Previous qualification (grade)', 'Mother's qualification',\n       'Father's qualification', 'Mother's occupation', 'Father's occupation',\n       'Admission grade', 'Displaced', 'Debtor', 'Tuition fees up to date',\n       'Gender', 'Scholarship holder', 'Age at enrollment',\n       'Curricular units 1st sem (enrolled)',\n       'Curricular units 1st sem (evaluations)',\n       'Curricular units 1st sem (approved)',\n       'Curricular units 1st sem (grade)',\n       'Curricular units 2nd sem (enrolled)',\n       'Curricular units 2nd sem (evaluations)',\n       'Curricular units 2nd sem (approved)',\n       'Curricular units 2nd sem (grade)', 'Unemployment rate', 'GDP',\n       'Mother Income', 'Father Income'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"# Train-validation split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:38:36.985960Z","iopub.execute_input":"2024-06-25T13:38:36.986427Z","iopub.status.idle":"2024-06-25T13:38:37.017319Z","shell.execute_reply.started":"2024-06-25T13:38:36.986391Z","shell.execute_reply":"2024-06-25T13:38:37.016039Z"},"trusted":true},"execution_count":238,"outputs":[]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:00:14.619213Z","iopub.execute_input":"2024-06-25T13:00:14.619696Z","iopub.status.idle":"2024-06-25T13:00:14.633566Z","shell.execute_reply.started":"2024-06-25T13:00:14.619660Z","shell.execute_reply":"2024-06-25T13:00:14.631717Z"},"trusted":true},"execution_count":218,"outputs":[{"execution_count":218,"output_type":"execute_result","data":{"text/plain":"       Target\nid           \n12052       2\n35360       1\n13363       2\n54706       2\n65631       2\n...       ...\n37194       2\n6265        2\n54886       2\n860         2\n15795       2\n\n[53562 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Target</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>12052</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>35360</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13363</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>54706</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>65631</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>37194</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>6265</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>54886</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>860</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>15795</th>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>53562 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:02:20.648790Z","iopub.execute_input":"2024-06-25T13:02:20.649362Z","iopub.status.idle":"2024-06-25T13:02:20.662946Z","shell.execute_reply.started":"2024-06-25T13:02:20.649318Z","shell.execute_reply":"2024-06-25T13:02:20.661639Z"},"trusted":true},"execution_count":231,"outputs":[{"execution_count":231,"output_type":"execute_result","data":{"text/plain":"       Target\nid           \n12052       2\n35360       1\n13363       2\n54706       2\n65631       2\n...       ...\n37194       2\n6265        2\n54886       2\n860         2\n15795       2\n\n[53562 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Target</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>12052</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>35360</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>13363</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>54706</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>65631</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>37194</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>6265</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>54886</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>860</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>15795</th>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>53562 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# over sampling using SMOTE\n\nfrom imblearn.over_sampling import SMOTE\n\n\n# Set up SMOTE to only oversample class 1\nsmote = SMOTE(sampling_strategy={1: int(len(y_train[y_train == 2]) * .5)}, random_state=42)\n#smote = SMOTE()\nX_train, y_train = smote.fit_resample(X_train, y_train)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:02:47.269581Z","iopub.execute_input":"2024-06-25T13:02:47.270042Z","iopub.status.idle":"2024-06-25T13:02:48.081087Z","shell.execute_reply.started":"2024-06-25T13:02:47.270009Z","shell.execute_reply":"2024-06-25T13:02:48.079702Z"},"trusted":true},"execution_count":232,"outputs":[]},{"cell_type":"code","source":"def over_sampling(X, Y):\n    x_res, y_res = SMOTE().fit_resample(X, Y)\n    new_data = pd.concat([x_res, y_res], axis=1)\n    return new_data","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:38:43.430391Z","iopub.execute_input":"2024-06-25T13:38:43.430825Z","iopub.status.idle":"2024-06-25T13:38:43.437836Z","shell.execute_reply.started":"2024-06-25T13:38:43.430792Z","shell.execute_reply":"2024-06-25T13:38:43.436208Z"},"trusted":true},"execution_count":239,"outputs":[]},{"cell_type":"code","source":"data = over_sampling(X_train, y_train)\ndata['Target'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:39:16.210348Z","iopub.execute_input":"2024-06-25T13:39:16.210839Z","iopub.status.idle":"2024-06-25T13:39:19.202308Z","shell.execute_reply.started":"2024-06-25T13:39:16.210802Z","shell.execute_reply":"2024-06-25T13:39:19.200783Z"},"trusted":true},"execution_count":241,"outputs":[{"execution_count":241,"output_type":"execute_result","data":{"text/plain":"Target\n2    25330\n1    25330\n0    25330\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"def MinMaxSc(X):\n    minmax = MinMaxScaler()\n    new_x = minmax.fit_transform(X)\n    return new_x","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:45:19.560945Z","iopub.execute_input":"2024-06-25T13:45:19.561415Z","iopub.status.idle":"2024-06-25T13:45:19.568039Z","shell.execute_reply.started":"2024-06-25T13:45:19.561382Z","shell.execute_reply":"2024-06-25T13:45:19.566635Z"},"trusted":true},"execution_count":244,"outputs":[]},{"cell_type":"code","source":"X, Y = data.drop(columns='Target', axis=1), data['Target']\nX = MinMaxSc(X)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:46:29.492462Z","iopub.execute_input":"2024-06-25T13:46:29.492931Z","iopub.status.idle":"2024-06-25T13:46:29.529791Z","shell.execute_reply.started":"2024-06-25T13:46:29.492886Z","shell.execute_reply":"2024-06-25T13:46:29.528437Z"},"trusted":true},"execution_count":248,"outputs":[]},{"cell_type":"code","source":"X, Y = data.drop(columns='Target', axis=1), data['Target']","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:48:43.297786Z","iopub.execute_input":"2024-06-25T13:48:43.298223Z","iopub.status.idle":"2024-06-25T13:48:43.307948Z","shell.execute_reply.started":"2024-06-25T13:48:43.298189Z","shell.execute_reply":"2024-06-25T13:48:43.306487Z"},"trusted":true},"execution_count":251,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.7, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:48:44.818713Z","iopub.execute_input":"2024-06-25T13:48:44.819122Z","iopub.status.idle":"2024-06-25T13:48:44.848775Z","shell.execute_reply.started":"2024-06-25T13:48:44.819092Z","shell.execute_reply":"2024-06-25T13:48:44.847223Z"},"trusted":true},"execution_count":252,"outputs":[]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:48:47.395096Z","iopub.execute_input":"2024-06-25T13:48:47.395512Z","iopub.status.idle":"2024-06-25T13:48:47.406662Z","shell.execute_reply.started":"2024-06-25T13:48:47.395481Z","shell.execute_reply":"2024-06-25T13:48:47.405231Z"},"trusted":true},"execution_count":253,"outputs":[{"execution_count":253,"output_type":"execute_result","data":{"text/plain":"47522    0\n38391    2\n1720     2\n50716    0\n55482    0\n        ..\n37194    0\n6265     1\n54886    0\n860      2\n15795    1\nName: Target, Length: 53193, dtype: int64"},"metadata":{}}]},{"cell_type":"raw","source":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T19:41:39.564774Z","iopub.execute_input":"2024-06-24T19:41:39.565204Z","iopub.status.idle":"2024-06-24T19:41:39.626076Z","shell.execute_reply.started":"2024-06-24T19:41:39.565168Z","shell.execute_reply":"2024-06-24T19:41:39.624727Z"}}},{"cell_type":"code","source":"# Changing the shape of y dataframe \ny_train = y_train.values.ravel()\nprint(y_train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:48:55.265694Z","iopub.execute_input":"2024-06-25T13:48:55.266164Z","iopub.status.idle":"2024-06-25T13:48:55.274268Z","shell.execute_reply.started":"2024-06-25T13:48:55.266128Z","shell.execute_reply":"2024-06-25T13:48:55.272925Z"},"trusted":true},"execution_count":254,"outputs":[{"name":"stdout","text":"(53193,)\n","output_type":"stream"}]},{"cell_type":"raw","source":"\n# Define models and their hyperparameters\nmodels = {\n    'Random Forest': {\n        'model': RandomForestClassifier(random_state=42),\n        'params': {\n            'model__n_estimators': [100, 200, 300],\n            'model__max_depth': [None, 10, 20, 30],\n            'model__min_samples_split': [2, 5, 10],\n            'model__min_samples_leaf': [1, 2, 4]\n        }\n    },\n    'XGBoost': {\n        'model': XGBClassifier(random_state=42),\n        'params': {\n            'model__n_estimators': [100, 200, 300],\n            'model__max_depth': [3, 4, 5],\n            'model__learning_rate': [0.01, 0.1, 0.3],\n            'model__subsample': [0.8, 0.9, 1.0]\n            'n_estimators': randint(100, 1000),\n            'max_depth': randint(3, 10),\n            'learning_rate': uniform(0.01, 0.3),\n            'subsample': uniform(0.6, 0.4),\n            'colsample_bytree': uniform(0.6, 0.4),\n            'min_child_weight': randint(1, 10),\n            'gamma': uniform(0, 0.5)\n        }\n    },\n    'Logistic Regression': {\n        'model': LogisticRegression(random_state=42),\n        'params': {\n            'model__C': [0.001, 0.01, 0.1, 1, 10, 100],\n            'model__penalty': ['l2'],  # 'l1' penalty is not supported with 'lbfgs' solver\n            'model__solver': ['lbfgs', 'saga']\n        }\n    }\n}\n\n# Function to create a pipeline with scaling and model\ndef create_pipeline(model):\n    return Pipeline([\n        ('scaler', StandardScaler()),\n        ('model', model)\n    ])\n\n# Perform Grid Search with Cross-Validation\nresults = {}\n\nfor name, model_info in models.items():\n    print(f\"\\nTuning {name}...\")\n    pipeline = create_pipeline(model_info['model'])\n    grid_search = GridSearchCV(pipeline, model_info['params'], cv=5, n_jobs=-1, verbose=1)\n    grid_search.fit(X_train, y_train)\n    \n    # Store results\n    results[name] = {\n        'best_params': grid_search.best_params_,\n        'best_score': grid_search.best_score_,\n        'test_accuracy': accuracy_score(y_test, grid_search.predict(X_test)),\n        'classification_report': classification_report(y_test, grid_search.predict(X_test))\n    }\n\n# Print results\nfor name, result in results.items():\n    print(f\"\\n{name}:\")\n    print(f\"Best Parameters: {result['best_params']}\")\n    print(f\"Best Cross-Validation Score: {result['best_score']:.4f}\")\n    print(f\"Test Accuracy: {result['test_accuracy']:.4f}\")\n    print(\"Classification Report:\")\n    print(result['classification_report'])\n\n# Identify the best model\nbest_model = max(results, key=lambda x: results[x]['test_accuracy'])\nprint(f\"\\nBest Model: {best_model}\")\nprint(f\"Best Model Test Accuracy: {results[best_model]['test_accuracy']:.4f}\")\n\n# Feature importance for the best model (if applicable)\nif best_model in ['Random Forest', 'XGBoost']:\n    best_pipeline = create_pipeline(models[best_model]['model'])\n    best_pipeline.set_params(**results[best_model]['best_params'])\n    best_pipeline.fit(X_train, y_train)\n    \n    importance = pd.DataFrame({\n        'feature': X.columns,\n        'importance': best_pipeline.named_steps['model'].feature_importances_\n    }).sort_values('importance', ascending=False)\n    \n    print(\"\\nFeature Importance:\")\n    print(importance)","metadata":{"execution":{"iopub.status.busy":"2024-06-23T07:42:42.998984Z","iopub.execute_input":"2024-06-23T07:42:42.999443Z","iopub.status.idle":"2024-06-23T09:02:50.844996Z","shell.execute_reply.started":"2024-06-23T07:42:42.999408Z","shell.execute_reply":"2024-06-23T09:02:50.843442Z"}}},{"cell_type":"markdown","source":"Tuning Random Forest...\nFitting 5 folds for each of 108 candidates, totalling 540 fits\n\nTuning XGBoost...\nFitting 5 folds for each of 81 candidates, totalling 405 fits\n\nTuning Logistic Regression...\nFitting 5 folds for each of 12 candidates, totalling 60 fits\n\nRandom Forest:\nBest Parameters: {'model__max_depth': 30, 'model__min_samples_leaf': 1, 'model__min_samples_split': 10, 'model__n_estimators': 200}\nBest Cross-Validation Score: 0.8238\nTest Accuracy: 0.8313\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.90      0.83      0.87      7579\n           1       0.65      0.60      0.62      4425\n           2       0.85      0.93      0.89     10952\n\n    accuracy                           0.83     22956\n   macro avg       0.80      0.78      0.79     22956\nweighted avg       0.83      0.83      0.83     22956\n\n\nXGBoost:\nBest Parameters: {'model__learning_rate': 0.1, 'model__max_depth': 5, 'model__n_estimators': 200, 'model__subsample': 0.9}\nBest Cross-Validation Score: 0.8289\nTest Accuracy: 0.8375\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.90      0.84      0.87      7579\n           1       0.66      0.62      0.64      4425\n           2       0.86      0.93      0.89     10952\n\n    accuracy                           0.84     22956\n   macro avg       0.81      0.79      0.80     22956\nweighted avg       0.84      0.84      0.84     22956\n\n\nLogistic Regression:\nBest Parameters: {'model__C': 0.1, 'model__penalty': 'l2', 'model__solver': 'saga'}\nBest Cross-Validation Score: 0.8136\nTest Accuracy: 0.8218\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.90      0.82      0.86      7579\n           1       0.63      0.56      0.59      4425\n           2       0.84      0.93      0.88     10952\n\n    accuracy                           0.82     22956\n   macro avg       0.79      0.77      0.78     22956\nweighted avg       0.82      0.82      0.82     22956\n\n\nBest Model: XGBoost\nBest Model Test Accuracy: 0.8375\n\nFeature Importance:\n                                   feature  importance\n24     Curricular units 2nd sem (approved)    0.525447\n14                 Tuition fees up to date    0.079526\n20     Curricular units 1st sem (approved)    0.045866\n23  Curricular units 2nd sem (evaluations)    0.043648\n22     Curricular units 2nd sem (enrolled)    0.038565\n16                      Scholarship holder    0.035203\n25        Curricular units 2nd sem (grade)    0.021837\n19  Curricular units 1st sem (evaluations)    0.020932\n18     Curricular units 1st sem (enrolled)    0.019188\n13                                  Debtor    0.015853\n15                                  Gender    0.015010\n4               Daytime/evening attendance    0.013011\n3                                   Course    0.011112\n17                       Age at enrollment    0.010402\n1                         Application mode    0.010086\n21        Curricular units 1st sem (grade)    0.009879\n9                      Mother's occupation    0.009209\n27                                     GDP    0.008713\n26                       Unemployment rate    0.007444\n10                     Father's occupation    0.007169\n11                         Admission grade    0.007027\n0                           Marital status    0.006689\n12                               Displaced    0.006678\n2                        Application order    0.006469\n6           Previous qualification (grade)    0.006341\n5                   Previous qualification    0.006240\n8                   Father's qualification    0.006236\n7                   Mother's qualification    0.006217","metadata":{}},{"cell_type":"raw","source":"from catboost import CatBoostClassifier\n\n# Initialize CatBoostClassifier\nmodel = CatBoostClassifier(iterations=903, \n                           learning_rate=0.1, \n                           depth=6, \n                           eval_metric='Accuracy',\n                           verbose=100)\n\n# Train the model\nmodel.fit(X_train, y_train, eval_set=(X_test, y_test), plot=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T11:12:39.346868Z","iopub.execute_input":"2024-06-25T11:12:39.347309Z","iopub.status.idle":"2024-06-25T11:12:40.802560Z","shell.execute_reply.started":"2024-06-25T11:12:39.347271Z","shell.execute_reply":"2024-06-25T11:12:40.800456Z"}}},{"cell_type":"raw","source":"from sklearn.metrics import accuracy_score, classification_report\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Test Accuracy: {accuracy:.4f}\")\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-06-25T10:28:27.073309Z","iopub.execute_input":"2024-06-25T10:28:27.073756Z","iopub.status.idle":"2024-06-25T10:28:27.193075Z","shell.execute_reply.started":"2024-06-25T10:28:27.073720Z","shell.execute_reply":"2024-06-25T10:28:27.191464Z"}}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nimport joblib\n\n# Create the model with best parameters\nparams = {\n    'learning_rate': 0.05,\n    'max_depth': 5,\n    'n_estimators': 400,\n    'subsample': 0.9,\n    'random_state': 42,\n    'lambda': 1.0,   # L2 regularization term on weights (default is 1)\n    'alpha': 0.5,     # L1 regularization term on weights (default is 0)\n}\nbest_xgb_model = XGBClassifier(**params)\n    \n# Create pipeline\nbest_xgb_pipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('model', best_xgb_model)\n])\n\n# Fit the model\nbest_xgb_pipeline.fit(\n    X_train, \n    y_train )\n\n\n# Save the model\njoblib.dump(best_xgb_pipeline, 'best_xgb_model.joblib')\n\n# To load the model later:\n# loaded_model = joblib.load('best_xgb_model.joblib'))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:49:08.039249Z","iopub.execute_input":"2024-06-25T13:49:08.039677Z","iopub.status.idle":"2024-06-25T13:49:28.559889Z","shell.execute_reply.started":"2024-06-25T13:49:08.039646Z","shell.execute_reply":"2024-06-25T13:49:28.558410Z"},"trusted":true},"execution_count":255,"outputs":[{"execution_count":255,"output_type":"execute_result","data":{"text/plain":"['best_xgb_model.joblib']"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, classification_report\n\n# Make predictions\ny_pred = best_xgb_pipeline.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Test Accuracy: {accuracy:.4f}\")\n\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\nmodels = {\n    'XGBoost': Pipeline([('scaler', StandardScaler()), ('model', best_xgb_model)]),\n}\n\nfor name, model in models.items():\n    scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')\n    print(f\"{name} Cross-Validation Accuracy: {scores.mean():.4f} (+/- {scores.std() * 2:.4f})\")\n    \n# Get feature importances\n# Accessing feature importances from the 'model' step in the pipeline\nimportances = pd.DataFrame({\n        'feature': X.columns,\n        'importance': best_xgb_pipeline.named_steps['model'].feature_importances_\n    }).sort_values('importance', ascending=False)\n    \nprint(\"\\nFeature Importance:\")\nprint(importances)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:49:28.562118Z","iopub.execute_input":"2024-06-25T13:49:28.562520Z","iopub.status.idle":"2024-06-25T13:50:53.896366Z","shell.execute_reply.started":"2024-06-25T13:49:28.562485Z","shell.execute_reply":"2024-06-25T13:50:53.894897Z"},"trusted":true},"execution_count":256,"outputs":[{"name":"stdout","text":"Test Accuracy: 0.8653\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.96      0.82      0.88      7626\n           1       0.80      0.86      0.83      7660\n           2       0.85      0.92      0.88      7511\n\n    accuracy                           0.87     22797\n   macro avg       0.87      0.87      0.87     22797\nweighted avg       0.87      0.87      0.87     22797\n\nXGBoost Cross-Validation Accuracy: 0.8661 (+/- 0.0079)\n\nFeature Importance:\n                                   feature  importance\n22     Curricular units 2nd sem (approved)    0.237696\n23        Curricular units 2nd sem (grade)    0.192220\n12                 Tuition fees up to date    0.135617\n14                      Scholarship holder    0.061110\n18     Curricular units 1st sem (approved)    0.060241\n27                           Father Income    0.036853\n20     Curricular units 2nd sem (enrolled)    0.029163\n11                                  Debtor    0.023870\n16     Curricular units 1st sem (enrolled)    0.021999\n26                           Mother Income    0.020145\n21  Curricular units 2nd sem (evaluations)    0.017414\n13                                  Gender    0.017014\n10                               Displaced    0.013840\n19        Curricular units 1st sem (grade)    0.013461\n25                                     GDP    0.012108\n24                       Unemployment rate    0.011834\n15                       Age at enrollment    0.011419\n17  Curricular units 1st sem (evaluations)    0.010852\n3                                   Course    0.009687\n4               Daytime/evening attendance    0.009129\n1                         Application mode    0.008400\n7                   Mother's qualification    0.007942\n8                   Father's qualification    0.007934\n2                        Application order    0.006775\n9                          Admission grade    0.005949\n0                           Marital status    0.005867\n5                   Previous qualification    0.005784\n6           Previous qualification (grade)    0.005677\n","output_type":"stream"}]},{"cell_type":"raw","source":"sorted_importances = importances.sort_values(by='importance', ascending=False)\n\nplt.figure(figsize=(10, 8))\nplt.title('Feature Importances')\nplt.bar(sorted_importances['feature'], sorted_importances['importance'], color='b')\nplt.xticks(rotation=90)  # Rotate feature names for better visibility\nplt.xlabel('Feature')\nplt.ylabel('Importance')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T11:54:40.129018Z","iopub.execute_input":"2024-06-25T11:54:40.129518Z","iopub.status.idle":"2024-06-25T11:54:40.913001Z","shell.execute_reply.started":"2024-06-25T11:54:40.129481Z","shell.execute_reply":"2024-06-25T11:54:40.911389Z"}}},{"cell_type":"raw","source":"from sklearn.ensemble import StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\nxgb_params = {\n                'learning_rate': 0.1, \n                'max_depth':5, \n                'n_estimators':200, \n                'subsample':0.9, \n                'random_state':42\n    \n}\nlgbm_params = {\n                 'objective': 'multiclass',\n                 'data_sample_strategy': 'goss',\n                 'tree_learner': 'feature', \n                 'n_estimators': 743, \n                 'learning_rate': 0.05,\n                 \n\n                 'lambda_l1': 0.1,\n                 'lambda_l2': 0.2, \n                 'num_leaves': 50, \n                 'max_depth': 8, \n         \n   \n                \n             \n           \n  \n                 'verbose': -1, \n                 'random_state': 42,\n                 'min_data_in_leaf': 20\n}\n# Define base models\nxgb_model = XGBClassifier(**xgb_params)\nlgbm_model = LGBMClassifier(**lgbm_params)\n\n# Adjust class weights specifically favoring class 1\nclass_weights = {0: 1, 1: 1, 2: 1}  # Increase weight of class 1\n# Define meta-model\nmeta_model = LogisticRegression(class_weight=class_weights, max_iter=1000)\n\n\n# Create the stacking ensemble\nstacking_model = StackingClassifier(\n    estimators=[('xgb', xgb_model), ('lgbm', lgbm_model)],\n    final_estimator=meta_model,\n    cv=5  # 5-fold cross-validation for creating meta-features\n)\n\n\n# Create a pipeline with scaling\nstacking_pipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('stacking', stacking_model)\n])\n\n# Fit the stacking ensemble\nstacking_pipeline.fit(X_train, y_train)\n\n# Make predictions\ny_pred = stacking_pipeline.predict(X_test)\n\n# Evaluate the model\nfrom sklearn.metrics import accuracy_score, classification_report\n\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"voting Ensemble Accuracy: {accuracy:.4f}\")\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n\n# Compare with individual models using cross-validation\nmodels = {\n    'XGBoost': Pipeline([('scaler', StandardScaler()), ('model', xgb_model)]),\n    'LightGBM': Pipeline([('scaler', StandardScaler()), ('model', lgbm_model)]),\n    'Stacking Ensemble': stacking_pipeline\n}\n\nfor name, model in models.items():\n    scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')\n    print(f\"{name} Cross-Validation Accuracy: {scores.mean():.4f} (+/- {scores.std() * 2:.4f})\")","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:53:42.443489Z","iopub.execute_input":"2024-06-25T13:53:42.444549Z","iopub.status.idle":"2024-06-25T13:57:22.699005Z","shell.execute_reply.started":"2024-06-25T13:53:42.444512Z","shell.execute_reply":"2024-06-25T13:57:22.697233Z"}}},{"cell_type":"markdown","source":"********************************","metadata":{}},{"cell_type":"markdown","source":"*********************************************","metadata":{}},{"cell_type":"raw","source":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform, randint\n\n# Define the parameter space\nxgb_param_dist = {\n    'n_estimators': randint(100, 1000),\n    'max_depth': randint(3, 10),\n    'learning_rate': uniform(0.01, 0.3),\n    'subsample': uniform(0.6, 0.4),\n    'colsample_bytree': uniform(0.6, 0.4),\n    'min_child_weight': randint(1, 10),\n    'gamma': uniform(0, 0.5)\n}\n\n# Create the XGBoost model\nxgb_model = XGBClassifier(random_state=42)\n\n# Set up RandomizedSearchCV\nxgb_random_search = RandomizedSearchCV(\n    xgb_model, \n    param_distributions=xgb_param_dist, \n    n_iter=100, \n    cv=5, \n    verbose=1, \n    n_jobs=-1, \n    random_state=42\n)\n\n# Fit RandomizedSearchCV\nxgb_random_search.fit(X_train, y_train)\n\n# Get the best parameters and best score\nprint(\"Best XGBoost Parameters:\", xgb_random_search.best_params_)\nprint(\"Best XGBoost CV Score:\", xgb_random_search.best_score_)\n\n# Create the best XGBoost model\nbest_xgb = XGBClassifier(**xgb_random_search.best_params_, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T21:36:57.444309Z","iopub.execute_input":"2024-06-24T21:36:57.444698Z"}}},{"cell_type":"raw","source":"from lightgbm import LGBMClassifier\n\n# Define the parameter space\nlgbm_param_dist = {\n    'num_leaves': randint(20, 3000),\n    'n_estimators': randint(100, 1000),\n    'max_depth': randint(3, 10),\n    'learning_rate': uniform(0.01, 0.3),\n    'subsample': uniform(0.6, 0.4),\n    'colsample_bytree': uniform(0.6, 0.4),\n    'min_child_samples': randint(1, 50),\n    'reg_alpha': uniform(0, 1),\n    'reg_lambda': uniform(0, 1),\n}\n\n# Create the LightGBM model\nlgbm_model = LGBMClassifier(random_state=42)\n\n# Set up RandomizedSearchCV\nlgbm_random_search = RandomizedSearchCV(\n    lgbm_model, \n    param_distributions=lgbm_param_dist, \n    n_iter=100, \n    cv=5, \n    verbose=1, \n    n_jobs=-1, \n    random_state=42\n)\n\n# Fit RandomizedSearchCV\nlgbm_random_search.fit(X_train, y_train)\n\n# Get the best parameters and best score\nprint(\"Best LightGBM Parameters:\", lgbm_random_search.best_params_)\nprint(\"Best LightGBM CV Score:\", lgbm_random_search.best_score_)\n\n# Create the best LightGBM model\nbest_lgbm = LGBMClassifier(**lgbm_random_search.best_params_, random_state=42)","metadata":{}},{"cell_type":"raw","source":"# Create the stacking ensemble with tuned models\nstacking_model = StackingClassifier(\n    estimators=[('xgb', best_xgb), ('lgbm', best_lgbm)],\n    final_estimator=meta_model,\n    cv=5\n)\n\n# Create a pipeline with scaling\nstacking_pipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('stacking', stacking_model)\n])\n\n# Fit the stacking ensemble\nstacking_pipeline.fit(X_train, y_train)\n\n# Make predictions\ny_pred = stacking_pipeline.predict(X_test)\n\n# Evaluate the model\nfrom sklearn.metrics import accuracy_score, classification_report\n\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Tuned Stacking Ensemble Accuracy: {accuracy:.4f}\")\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))","metadata":{}},{"cell_type":"raw","source":"# For XGBoost\nfeature_importance = best_xgb.feature_importances_\nfeature_names = X_train.columns\nfor importance, name in sorted(zip(feature_importance, feature_names), reverse=True):\n    print(name, importance)\n\n# For LightGBM\nfeature_importance = best_lgbm.feature_importances_\nfeature_names = X_train.columns\nfor importance, name in sorted(zip(feature_importance, feature_names), reverse=True):\n    print(name, importance)","metadata":{}},{"cell_type":"raw","source":"from sklearn.model_selection import learning_curve\nimport matplotlib.pyplot as plt\n\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n    plt.legend(loc=\"best\")\n    return plt\n\nplot_learning_curve(best_xgb, \"XGBoost Learning Curve\", X_train, y_train, cv=5)\nplot_learning_curve(best_lgbm, \"LightGBM Learning Curve\", X_train, y_train, cv=5)\nplt.show()","metadata":{}},{"cell_type":"markdown","source":"# 📈 Model Validation","metadata":{}},{"cell_type":"markdown","source":"# 🔮 Prediction","metadata":{}},{"cell_type":"code","source":"data1_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T14:01:33.162909Z","iopub.execute_input":"2024-06-25T14:01:33.163363Z","iopub.status.idle":"2024-06-25T14:01:33.194484Z","shell.execute_reply.started":"2024-06-25T14:01:33.163330Z","shell.execute_reply":"2024-06-25T14:01:33.193079Z"},"trusted":true},"execution_count":263,"outputs":[{"execution_count":263,"output_type":"execute_result","data":{"text/plain":"       Marital status  Application mode  Application order  Course  \\\nid                                                                   \n76518               1                 1                  1    9500   \n76519               1                 1                  1    9238   \n76520               1                 1                  1    9238   \n76521               1                44                  1    9147   \n76522               1                39                  1    9670   \n\n       Daytime/evening attendance  Previous qualification  \\\nid                                                          \n76518                           1                       1   \n76519                           1                       1   \n76520                           1                       1   \n76521                           1                      39   \n76522                           1                       1   \n\n       Previous qualification (grade)  Mother's qualification  \\\nid                                                              \n76518                           141.0                       3   \n76519                           128.0                       1   \n76520                           118.0                       1   \n76521                           130.0                       1   \n76522                           110.0                       1   \n\n       Father's qualification  Admission grade  ...  \\\nid                                              ...   \n76518                       1            152.1  ...   \n76519                      19            116.5  ...   \n76520                      19            114.2  ...   \n76521                      19            130.0  ...   \n76522                      37            106.0  ...   \n\n       Curricular units 1st sem (approved)  Curricular units 1st sem (grade)  \\\nid                                                                             \n76518                                    0                          0.000000   \n76519                                    6                         14.857143   \n76520                                    6                         12.000000   \n76521                                    5                         11.500000   \n76522                                    3                         11.000000   \n\n       Curricular units 2nd sem (enrolled)  \\\nid                                           \n76518                                    8   \n76519                                    6   \n76520                                    6   \n76521                                    8   \n76522                                    6   \n\n       Curricular units 2nd sem (evaluations)  \\\nid                                              \n76518                                       0   \n76519                                       6   \n76520                                      11   \n76521                                      14   \n76522                                       9   \n\n       Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\nid                                                                             \n76518                                    0                          0.000000   \n76519                                    6                         13.500000   \n76520                                    5                         11.000000   \n76521                                    5                         11.000000   \n76522                                    4                         10.666667   \n\n       Unemployment rate   GDP  Mother Income  Father Income  \nid                                                            \n76518               13.9  0.79            2.0            1.0  \n76519               11.1  2.02            1.0            0.0  \n76520               15.5 -4.06            1.0            0.0  \n76521                8.9  3.51            1.0            1.0  \n76522                7.6  0.32            0.0            0.0  \n\n[5 rows x 28 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Marital status</th>\n      <th>Application mode</th>\n      <th>Application order</th>\n      <th>Course</th>\n      <th>Daytime/evening attendance</th>\n      <th>Previous qualification</th>\n      <th>Previous qualification (grade)</th>\n      <th>Mother's qualification</th>\n      <th>Father's qualification</th>\n      <th>Admission grade</th>\n      <th>...</th>\n      <th>Curricular units 1st sem (approved)</th>\n      <th>Curricular units 1st sem (grade)</th>\n      <th>Curricular units 2nd sem (enrolled)</th>\n      <th>Curricular units 2nd sem (evaluations)</th>\n      <th>Curricular units 2nd sem (approved)</th>\n      <th>Curricular units 2nd sem (grade)</th>\n      <th>Unemployment rate</th>\n      <th>GDP</th>\n      <th>Mother Income</th>\n      <th>Father Income</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>76518</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>141.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>152.1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>13.9</td>\n      <td>0.79</td>\n      <td>2.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>76519</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>128.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>116.5</td>\n      <td>...</td>\n      <td>6</td>\n      <td>14.857143</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>13.500000</td>\n      <td>11.1</td>\n      <td>2.02</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>76520</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>118.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>114.2</td>\n      <td>...</td>\n      <td>6</td>\n      <td>12.000000</td>\n      <td>6</td>\n      <td>11</td>\n      <td>5</td>\n      <td>11.000000</td>\n      <td>15.5</td>\n      <td>-4.06</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>76521</th>\n      <td>1</td>\n      <td>44</td>\n      <td>1</td>\n      <td>9147</td>\n      <td>1</td>\n      <td>39</td>\n      <td>130.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>130.0</td>\n      <td>...</td>\n      <td>5</td>\n      <td>11.500000</td>\n      <td>8</td>\n      <td>14</td>\n      <td>5</td>\n      <td>11.000000</td>\n      <td>8.9</td>\n      <td>3.51</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>76522</th>\n      <td>1</td>\n      <td>39</td>\n      <td>1</td>\n      <td>9670</td>\n      <td>1</td>\n      <td>1</td>\n      <td>110.0</td>\n      <td>1</td>\n      <td>37</td>\n      <td>106.0</td>\n      <td>...</td>\n      <td>3</td>\n      <td>11.000000</td>\n      <td>6</td>\n      <td>9</td>\n      <td>4</td>\n      <td>10.666667</td>\n      <td>7.6</td>\n      <td>0.32</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 28 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T13:57:59.567340Z","iopub.execute_input":"2024-06-25T13:57:59.567804Z","iopub.status.idle":"2024-06-25T13:57:59.596563Z","shell.execute_reply.started":"2024-06-25T13:57:59.567767Z","shell.execute_reply":"2024-06-25T13:57:59.595025Z"},"trusted":true},"execution_count":259,"outputs":[{"execution_count":259,"output_type":"execute_result","data":{"text/plain":"   Marital status  Application mode  Application order  Course  \\\n0               1                 1                  6    9500   \n1               1                 1                  5    9147   \n2               1                 1                  3    9773   \n3               1                 1                  1    9238   \n4               1                17                  2    9773   \n\n   Daytime/evening attendance  Previous qualification  \\\n0                           1                       1   \n1                           1                       1   \n2                           1                       1   \n3                           1                       1   \n4                           1                       1   \n\n   Previous qualification (grade)  Mother's qualification  \\\n0                           140.0                      37   \n1                           131.0                      19   \n2                           132.0                       1   \n3                           116.0                       1   \n4                           125.0                      19   \n\n   Father's qualification  Admission grade  ...  \\\n0                      37            130.5  ...   \n1                      19            138.9  ...   \n2                      19            126.6  ...   \n3                      38            110.5  ...   \n4                       1            117.1  ...   \n\n   Curricular units 1st sem (approved)  Curricular units 1st sem (grade)  \\\n0                                    8                         13.403750   \n1                                    5                         13.000000   \n2                                    6                         13.333333   \n3                                    6                         14.000000   \n4                                    6                         13.000000   \n\n   Curricular units 2nd sem (enrolled)  \\\n0                                    8   \n1                                    5   \n2                                    6   \n3                                    6   \n4                                    6   \n\n   Curricular units 2nd sem (evaluations)  \\\n0                                       8   \n1                                       6   \n2                                       8   \n3                                       6   \n4                                       8   \n\n   Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\n0                                    8                         13.403750   \n1                                    5                         12.800000   \n2                                    5                         12.400000   \n3                                    6                         14.666667   \n4                                    6                         13.142857   \n\n   Unemployment rate   GDP  Mother Income  Father Income  \n0                9.4 -3.12            1.0            0.0  \n1                9.4 -3.12            0.0            1.0  \n2                8.9  3.51            1.0            1.0  \n3               11.1  2.02            1.0            1.0  \n4               15.5 -4.06            0.0            1.0  \n\n[5 rows x 28 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Marital status</th>\n      <th>Application mode</th>\n      <th>Application order</th>\n      <th>Course</th>\n      <th>Daytime/evening attendance</th>\n      <th>Previous qualification</th>\n      <th>Previous qualification (grade)</th>\n      <th>Mother's qualification</th>\n      <th>Father's qualification</th>\n      <th>Admission grade</th>\n      <th>...</th>\n      <th>Curricular units 1st sem (approved)</th>\n      <th>Curricular units 1st sem (grade)</th>\n      <th>Curricular units 2nd sem (enrolled)</th>\n      <th>Curricular units 2nd sem (evaluations)</th>\n      <th>Curricular units 2nd sem (approved)</th>\n      <th>Curricular units 2nd sem (grade)</th>\n      <th>Unemployment rate</th>\n      <th>GDP</th>\n      <th>Mother Income</th>\n      <th>Father Income</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>6</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>140.0</td>\n      <td>37</td>\n      <td>37</td>\n      <td>130.5</td>\n      <td>...</td>\n      <td>8</td>\n      <td>13.403750</td>\n      <td>8</td>\n      <td>8</td>\n      <td>8</td>\n      <td>13.403750</td>\n      <td>9.4</td>\n      <td>-3.12</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>9147</td>\n      <td>1</td>\n      <td>1</td>\n      <td>131.0</td>\n      <td>19</td>\n      <td>19</td>\n      <td>138.9</td>\n      <td>...</td>\n      <td>5</td>\n      <td>13.000000</td>\n      <td>5</td>\n      <td>6</td>\n      <td>5</td>\n      <td>12.800000</td>\n      <td>9.4</td>\n      <td>-3.12</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>9773</td>\n      <td>1</td>\n      <td>1</td>\n      <td>132.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>126.6</td>\n      <td>...</td>\n      <td>6</td>\n      <td>13.333333</td>\n      <td>6</td>\n      <td>8</td>\n      <td>5</td>\n      <td>12.400000</td>\n      <td>8.9</td>\n      <td>3.51</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>116.0</td>\n      <td>1</td>\n      <td>38</td>\n      <td>110.5</td>\n      <td>...</td>\n      <td>6</td>\n      <td>14.000000</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>14.666667</td>\n      <td>11.1</td>\n      <td>2.02</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>17</td>\n      <td>2</td>\n      <td>9773</td>\n      <td>1</td>\n      <td>1</td>\n      <td>125.0</td>\n      <td>19</td>\n      <td>1</td>\n      <td>117.1</td>\n      <td>...</td>\n      <td>6</td>\n      <td>13.000000</td>\n      <td>6</td>\n      <td>8</td>\n      <td>6</td>\n      <td>13.142857</td>\n      <td>15.5</td>\n      <td>-4.06</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 28 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"predictions = best_xgb_pipeline.predict(data1_test)\npredictions","metadata":{"execution":{"iopub.status.busy":"2024-06-25T14:02:02.376143Z","iopub.execute_input":"2024-06-25T14:02:02.376582Z","iopub.status.idle":"2024-06-25T14:02:03.602022Z","shell.execute_reply.started":"2024-06-25T14:02:02.376547Z","shell.execute_reply":"2024-06-25T14:02:03.600719Z"},"trusted":true},"execution_count":267,"outputs":[{"execution_count":267,"output_type":"execute_result","data":{"text/plain":"array([0, 2, 2, ..., 0, 0, 0])"},"metadata":{}}]},{"cell_type":"code","source":"predictions = label_encoder.inverse_transform(predictions)\npredictions","metadata":{"execution":{"iopub.status.busy":"2024-06-25T14:02:17.184646Z","iopub.execute_input":"2024-06-25T14:02:17.185099Z","iopub.status.idle":"2024-06-25T14:02:17.201891Z","shell.execute_reply.started":"2024-06-25T14:02:17.185057Z","shell.execute_reply":"2024-06-25T14:02:17.200631Z"},"trusted":true},"execution_count":268,"outputs":[{"execution_count":268,"output_type":"execute_result","data":{"text/plain":"array(['Dropout', 'Graduate', 'Graduate', ..., 'Dropout', 'Dropout',\n       'Dropout'], dtype=object)"},"metadata":{}}]},{"cell_type":"markdown","source":"# 📤 Submission","metadata":{}},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'id': data1_test.index,  \n    'Target': predictions  \n})\n\n# Save to CSV 💾\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T14:02:19.821482Z","iopub.execute_input":"2024-06-25T14:02:19.821996Z","iopub.status.idle":"2024-06-25T14:02:19.928214Z","shell.execute_reply.started":"2024-06-25T14:02:19.821959Z","shell.execute_reply":"2024-06-25T14:02:19.926824Z"},"trusted":true},"execution_count":269,"outputs":[]}]}